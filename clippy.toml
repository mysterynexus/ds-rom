disallowed-methods = [
  { path = "std::vec::Vec::remove", reason = "this method can panic" },

  { path = "std::fs::read", reason = "not available on wasm" },
  { path = "std::fs::read_to_string", reason = "not available on wasm" },
  { path = "std::fs::write", reason = "not available on wasm" },
  { path = "std::fs::copy", reason = "not available on wasm" },
  { path = "std::fs::rename", reason = "not available on wasm" },
  { path = "std::fs::create_dir", reason = "not available on wasm" },
  { path = "std::fs::create_dir_all", reason = "not available on wasm" },
  { path = "std::fs::remove_file", reason = "not available on wasm" },
  { path = "std::fs::remove_dir", reason = "not available on wasm" },
  { path = "std::fs::remove_dir_all", reason = "not available on wasm" },
  { path = "std::fs::read_dir", reason = "not available on wasm" },
  { path = "std::fs::metadata", reason = "not available on wasm" },
  { path = "std::fs::exists", reason = "not available on wasm" },
  { path = "std::fs::symlink_metadata", reason = "not available on wasm" },
  { path = "std::fs::set_permissions", reason = "not available on wasm" },
  { path = "std::fs::canonicalize", reason = "not available on wasm" },
  { path = "std::fs::File::open", reason = "not available on wasm" },
  { path = "std::fs::File::create", reason = "not available on wasm" },
  { path = "std::fs::File::options", reason = "not available on wasm" },
  { path = "std::fs::OpenOptions::new", reason = "not available on wasm" },
  { path = "std::fs::DirBuilder::new", reason = "not available on wasm" },

  { path = "std::path::Path::exists", reason = "not available on wasm" },

  # { path = "std::sync::Mutex::new", reason = "not available on wasm" },
  { path = "std::sync::RwLock::new", reason = "not available on wasm" },
  { path = "std::sync::Condvar::new", reason = "not available on wasm" },
  { path = "std::sync::Barrier::new", reason = "not available on wasm" },
  { path = "std::sync::Once::new", reason = "not available on wasm" },
  { path = "std::sync::LazyLock::new", reason = "not available on wasm" },
  { path = "std::sync::Weak::new", reason = "not available on wasm" },
  { path = "std::sync::mpsc::channel", reason = "not available on wasm" },
  { path = "std::sync::mpsc::sync_channel", reason = "not available on wasm" },
  { path = "std::sync::atomic::fence", reason = "not available on wasm" },
  { path = "std::sync::atomic::compiler_fence", reason = "not available on wasm" },

  { path = "std::net::TcpStream::connect", reason = "not available on wasm" },
  { path = "std::net::TcpStream::connect_timeout", reason = "not available on wasm" },
  { path = "std::net::TcpListener::bind", reason = "not available on wasm" },
  { path = "std::net::TcpListener::accept", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::bind", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::connect", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::send", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::send_to", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::recv", reason = "not available on wasm" },
  { path = "std::net::UdpSocket::recv_from", reason = "not available on wasm" },

  { path = "image::open", reason = "not available on wasm" },
  { path = "image::ImageReader::open", reason = "not available on wasm" },
  { path = "image::ImageBuffer::save", reason = "not available on wasm" },
]
